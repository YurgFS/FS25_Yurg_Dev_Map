name: New Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        type: string
        default: 'v0.0.0.0'
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

run-name: >-
  ${{ github.event_name == 'workflow_dispatch'
    && format('New Release {0} by {1}', inputs.version, github.actor)
    || format('New Release {0} by {1}', github.event.pull_request.title, github.actor) }}

jobs:
  release:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: "Prepare Release"
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          ACTOR: ${{ github.actor }}
          INPUT_VERSION: ${{ inputs.version }}
        shell: bash
        run: |
          NEW_VERSION="${INPUT_VERSION}"
          if [[ "${NEW_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "RELEASE_NAME=${NEW_VERSION}" >> "${GITHUB_ENV}"
            echo "RELEASE_TAG=${NEW_VERSION}" >> "${GITHUB_ENV}"
            echo 'RELEASE_BODY<<RELEASE_BODY_EOF' >> "${GITHUB_ENV}"
            echo '## Download' >> "${GITHUB_ENV}"
            echo 'Only use the following download link:' >> "${GITHUB_ENV}"
            echo '- https://sharemods.com/xxxxxx/zzzzzz.zip.html' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo 'Uploading all or part of this mod on another website is not permitted (only noncommercial use of my work is permitted).' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '## Changelog' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!NOTE]' >> "${GITHUB_ENV}"
            echo '> Useful information' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!TIP]' >> "${GITHUB_ENV}"
            echo '> Helpful advice' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!IMPORTANT]' >> "${GITHUB_ENV}"
            echo '> Key information' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!WARNING]' >> "${GITHUB_ENV}"
            echo '> Info that needs user attention' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!CAUTION]' >> "${GITHUB_ENV}"
            echo '> Advises about risks' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo 'RELEASE_BODY_EOF' >> "${GITHUB_ENV}"
          else
            echo "::error title={Wrong Input}::{Provided version does not match expected pattern.}"
            exit 1
          fi
      - name: "Prepare Release"
        if: ${{ github.event_name == 'pull_request' }}
        env:
          ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        shell: bash
        run: |
          NEW_VERSION="${PR_TITLE}"
          if [[ "${NEW_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "RELEASE_NAME=${NEW_VERSION}" >> "${GITHUB_ENV}"
            echo "RELEASE_TAG=${NEW_VERSION}" >> "${GITHUB_ENV}"
            echo 'RELEASE_BODY<<RELEASE_BODY_EOF' >> "${GITHUB_ENV}"
            echo '## Download' >> "${GITHUB_ENV}"
            echo 'Only use the following download link:' >> "${GITHUB_ENV}"
            echo '- https://sharemods.com/xxxxxx/zzzzzz.zip.html' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo 'Uploading all or part of this mod on another website is not permitted (only noncommercial use of my work is permitted).' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '## Changelog' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!NOTE]' >> "${GITHUB_ENV}"
            echo '> Useful information' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!TIP]' >> "${GITHUB_ENV}"
            echo '> Helpful advice' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!IMPORTANT]' >> "${GITHUB_ENV}"
            echo '> Key information' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!WARNING]' >> "${GITHUB_ENV}"
            echo '> Info that needs user attention' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo '> [!CAUTION]' >> "${GITHUB_ENV}"
            echo '> Advises about risks' >> "${GITHUB_ENV}"
            echo -ne '\n' >> "${GITHUB_ENV}"
            echo 'RELEASE_BODY_EOF' >> "${GITHUB_ENV}"
          else
            echo "::error title={Wrong Input}::{Provided version does not match expected pattern.}"
            exit 1
          fi
      - name: "Create Draft Release"
        uses: actions/github-script@v7
        with:
          github-token: "${{ secrets.GIT_BOT_TOKEN }}"
          script: |
            const fs = require('fs');
            if (!process.env.RELEASE_NAME) {
              core.setFailed("The environment variable RELEASE_NAME is not defined.")
              return;
            }
            if (!process.env.RELEASE_TAG) {
              core.setFailed("The environment variable RELEASE_TAG is not defined.")
              return;
            }
            if (!process.env.RELEASE_BODY) {
              core.setFailed("The environment variable RELEASE_BODY is not defined.")
              return;
            }
            console.log(`Repository   : '${context.repo.repo}'`);
            console.log(`Owner        : '${context.repo.owner}'`);
            console.log(`Release Name : '${process.env.RELEASE_NAME}'`);
            console.log(`Release Tag  : '${process.env.RELEASE_TAG}'`);
            try {
               const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: process.env.RELEASE_NAME,
                body: process.env.RELEASE_BODY,
                tag_name: process.env.RELEASE_TAG,
                generate_release_notes: true,
                prerelease: false,
                draft: true,
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
              console.log(`Release Id   : '${process.env.RELEASE_ID}'`);
            } catch (error) {
              core.setFailed(`Create Release: ${error.message}`);
              return;
            }
